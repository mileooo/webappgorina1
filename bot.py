from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, WebAppInfo
import asyncio
import json
import logging

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ)
logging.basicConfig(level=logging.INFO)

API_TOKEN = "8269137514:AAHj6mSZgHb1w9S85GAjlP1249O9RceZBsM"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–æ–π WebApp
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    webapp_kb = ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(
                text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                web_app=WebAppInfo(url="https://webappgorina1-27jw.vercel.app")  # <-- —Å—é–¥–∞ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ —Ö–æ—Å—Ç–∏–Ω–≥ URL
            )
        ]],
        resize_keyboard=True
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üçè Bravo Market!\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω üëá",
        reply_markup=webapp_kb
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
@dp.message()
async def handle_webapp(message: types.Message):
    if message.web_app_data:
        try:
            cart = json.loads(message.web_app_data.data)
            if not cart:
                await message.answer("‚ùó –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –∑–∞–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å üòâ")
                return

            total = sum(item["price"] for item in cart)
            text = "üßæ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:*\n\n" + "\n".join(
                [f"‚Ä¢ {item['name']} ‚Äî {item['price']}‚ÇΩ" for item in cart]
            )
            text += f"\n\nüí∞ *–ò—Ç–æ–≥–æ:* {total}‚ÇΩ"

            await message.answer(text, parse_mode="Markdown")

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:
            # with open("orders.json", "a", encoding="utf-8") as f:
            #     json.dump({"user": message.from_user.id, "order": cart}, f, ensure_ascii=False)
            #     f.write("\n")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")
    else:
        await message.answer("üëã –û—Ç–ø—Ä–∞–≤—å /start, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
